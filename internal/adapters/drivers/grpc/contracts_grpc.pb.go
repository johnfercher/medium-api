// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.1
// source: proto/contracts.proto

package grpc

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CreateProductHandlerClient is the client API for CreateProductHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CreateProductHandlerClient interface {
	Create(ctx context.Context, in *CreateProduct, opts ...grpc.CallOption) (*ProductResponse, error)
}

type createProductHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewCreateProductHandlerClient(cc grpc.ClientConnInterface) CreateProductHandlerClient {
	return &createProductHandlerClient{cc}
}

func (c *createProductHandlerClient) Create(ctx context.Context, in *CreateProduct, opts ...grpc.CallOption) (*ProductResponse, error) {
	out := new(ProductResponse)
	err := c.cc.Invoke(ctx, "/CreateProductHandler/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CreateProductHandlerServer is the server API for CreateProductHandler service.
// All implementations must embed UnimplementedCreateProductHandlerServer
// for forward compatibility
type CreateProductHandlerServer interface {
	Create(context.Context, *CreateProduct) (*ProductResponse, error)
	mustEmbedUnimplementedCreateProductHandlerServer()
}

// UnimplementedCreateProductHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedCreateProductHandlerServer struct{}

func (UnimplementedCreateProductHandlerServer) Create(context.Context, *CreateProduct) (*ProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCreateProductHandlerServer) mustEmbedUnimplementedCreateProductHandlerServer() {}

// UnsafeCreateProductHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CreateProductHandlerServer will
// result in compilation errors.
type UnsafeCreateProductHandlerServer interface {
	mustEmbedUnimplementedCreateProductHandlerServer()
}

func RegisterCreateProductHandlerServer(s grpc.ServiceRegistrar, srv CreateProductHandlerServer) {
	s.RegisterService(&CreateProductHandler_ServiceDesc, srv)
}

func _CreateProductHandler_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProduct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreateProductHandlerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CreateProductHandler/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreateProductHandlerServer).Create(ctx, req.(*CreateProduct))
	}
	return interceptor(ctx, in, info, handler)
}

// CreateProductHandler_ServiceDesc is the grpc.ServiceDesc for CreateProductHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CreateProductHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CreateProductHandler",
	HandlerType: (*CreateProductHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CreateProductHandler_Create_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/contracts.proto",
}

// DeleteProductHandlerClient is the client API for DeleteProductHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeleteProductHandlerClient interface {
	Delete(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Empty, error)
}

type deleteProductHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewDeleteProductHandlerClient(cc grpc.ClientConnInterface) DeleteProductHandlerClient {
	return &deleteProductHandlerClient{cc}
}

func (c *deleteProductHandlerClient) Delete(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/DeleteProductHandler/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeleteProductHandlerServer is the server API for DeleteProductHandler service.
// All implementations must embed UnimplementedDeleteProductHandlerServer
// for forward compatibility
type DeleteProductHandlerServer interface {
	Delete(context.Context, *ID) (*Empty, error)
	mustEmbedUnimplementedDeleteProductHandlerServer()
}

// UnimplementedDeleteProductHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedDeleteProductHandlerServer struct{}

func (UnimplementedDeleteProductHandlerServer) Delete(context.Context, *ID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDeleteProductHandlerServer) mustEmbedUnimplementedDeleteProductHandlerServer() {}

// UnsafeDeleteProductHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeleteProductHandlerServer will
// result in compilation errors.
type UnsafeDeleteProductHandlerServer interface {
	mustEmbedUnimplementedDeleteProductHandlerServer()
}

func RegisterDeleteProductHandlerServer(s grpc.ServiceRegistrar, srv DeleteProductHandlerServer) {
	s.RegisterService(&DeleteProductHandler_ServiceDesc, srv)
}

func _DeleteProductHandler_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeleteProductHandlerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeleteProductHandler/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeleteProductHandlerServer).Delete(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

// DeleteProductHandler_ServiceDesc is the grpc.ServiceDesc for DeleteProductHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeleteProductHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DeleteProductHandler",
	HandlerType: (*DeleteProductHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Delete",
			Handler:    _DeleteProductHandler_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/contracts.proto",
}

// GetProductHandlerClient is the client API for GetProductHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetProductHandlerClient interface {
	Get(ctx context.Context, in *ID, opts ...grpc.CallOption) (*ProductResponse, error)
}

type getProductHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewGetProductHandlerClient(cc grpc.ClientConnInterface) GetProductHandlerClient {
	return &getProductHandlerClient{cc}
}

func (c *getProductHandlerClient) Get(ctx context.Context, in *ID, opts ...grpc.CallOption) (*ProductResponse, error) {
	out := new(ProductResponse)
	err := c.cc.Invoke(ctx, "/GetProductHandler/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetProductHandlerServer is the server API for GetProductHandler service.
// All implementations must embed UnimplementedGetProductHandlerServer
// for forward compatibility
type GetProductHandlerServer interface {
	Get(context.Context, *ID) (*ProductResponse, error)
	mustEmbedUnimplementedGetProductHandlerServer()
}

// UnimplementedGetProductHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedGetProductHandlerServer struct{}

func (UnimplementedGetProductHandlerServer) Get(context.Context, *ID) (*ProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedGetProductHandlerServer) mustEmbedUnimplementedGetProductHandlerServer() {}

// UnsafeGetProductHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetProductHandlerServer will
// result in compilation errors.
type UnsafeGetProductHandlerServer interface {
	mustEmbedUnimplementedGetProductHandlerServer()
}

func RegisterGetProductHandlerServer(s grpc.ServiceRegistrar, srv GetProductHandlerServer) {
	s.RegisterService(&GetProductHandler_ServiceDesc, srv)
}

func _GetProductHandler_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetProductHandlerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GetProductHandler/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetProductHandlerServer).Get(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

// GetProductHandler_ServiceDesc is the grpc.ServiceDesc for GetProductHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GetProductHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GetProductHandler",
	HandlerType: (*GetProductHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _GetProductHandler_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/contracts.proto",
}

// SearchProductHandlerClient is the client API for SearchProductHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SearchProductHandlerClient interface {
	Search(ctx context.Context, in *Type, opts ...grpc.CallOption) (*ProductsResponse, error)
}

type searchProductHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewSearchProductHandlerClient(cc grpc.ClientConnInterface) SearchProductHandlerClient {
	return &searchProductHandlerClient{cc}
}

func (c *searchProductHandlerClient) Search(ctx context.Context, in *Type, opts ...grpc.CallOption) (*ProductsResponse, error) {
	out := new(ProductsResponse)
	err := c.cc.Invoke(ctx, "/SearchProductHandler/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SearchProductHandlerServer is the server API for SearchProductHandler service.
// All implementations must embed UnimplementedSearchProductHandlerServer
// for forward compatibility
type SearchProductHandlerServer interface {
	Search(context.Context, *Type) (*ProductsResponse, error)
	mustEmbedUnimplementedSearchProductHandlerServer()
}

// UnimplementedSearchProductHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedSearchProductHandlerServer struct{}

func (UnimplementedSearchProductHandlerServer) Search(context.Context, *Type) (*ProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedSearchProductHandlerServer) mustEmbedUnimplementedSearchProductHandlerServer() {}

// UnsafeSearchProductHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SearchProductHandlerServer will
// result in compilation errors.
type UnsafeSearchProductHandlerServer interface {
	mustEmbedUnimplementedSearchProductHandlerServer()
}

func RegisterSearchProductHandlerServer(s grpc.ServiceRegistrar, srv SearchProductHandlerServer) {
	s.RegisterService(&SearchProductHandler_ServiceDesc, srv)
}

func _SearchProductHandler_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Type)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchProductHandlerServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SearchProductHandler/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchProductHandlerServer).Search(ctx, req.(*Type))
	}
	return interceptor(ctx, in, info, handler)
}

// SearchProductHandler_ServiceDesc is the grpc.ServiceDesc for SearchProductHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SearchProductHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SearchProductHandler",
	HandlerType: (*SearchProductHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _SearchProductHandler_Search_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/contracts.proto",
}

// UpdateProductHandlerClient is the client API for UpdateProductHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UpdateProductHandlerClient interface {
	Update(ctx context.Context, in *Product, opts ...grpc.CallOption) (*ProductResponse, error)
}

type updateProductHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewUpdateProductHandlerClient(cc grpc.ClientConnInterface) UpdateProductHandlerClient {
	return &updateProductHandlerClient{cc}
}

func (c *updateProductHandlerClient) Update(ctx context.Context, in *Product, opts ...grpc.CallOption) (*ProductResponse, error) {
	out := new(ProductResponse)
	err := c.cc.Invoke(ctx, "/UpdateProductHandler/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UpdateProductHandlerServer is the server API for UpdateProductHandler service.
// All implementations must embed UnimplementedUpdateProductHandlerServer
// for forward compatibility
type UpdateProductHandlerServer interface {
	Update(context.Context, *Product) (*ProductResponse, error)
	mustEmbedUnimplementedUpdateProductHandlerServer()
}

// UnimplementedUpdateProductHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedUpdateProductHandlerServer struct{}

func (UnimplementedUpdateProductHandlerServer) Update(context.Context, *Product) (*ProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedUpdateProductHandlerServer) mustEmbedUnimplementedUpdateProductHandlerServer() {}

// UnsafeUpdateProductHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UpdateProductHandlerServer will
// result in compilation errors.
type UnsafeUpdateProductHandlerServer interface {
	mustEmbedUnimplementedUpdateProductHandlerServer()
}

func RegisterUpdateProductHandlerServer(s grpc.ServiceRegistrar, srv UpdateProductHandlerServer) {
	s.RegisterService(&UpdateProductHandler_ServiceDesc, srv)
}

func _UpdateProductHandler_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateProductHandlerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UpdateProductHandler/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateProductHandlerServer).Update(ctx, req.(*Product))
	}
	return interceptor(ctx, in, info, handler)
}

// UpdateProductHandler_ServiceDesc is the grpc.ServiceDesc for UpdateProductHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UpdateProductHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "UpdateProductHandler",
	HandlerType: (*UpdateProductHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Update",
			Handler:    _UpdateProductHandler_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/contracts.proto",
}
