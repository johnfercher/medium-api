// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// HandlerAdapter is an autogenerated mock type for the HandlerAdapter type
type HandlerAdapter struct {
	mock.Mock
}

type HandlerAdapter_Expecter struct {
	mock *mock.Mock
}

func (_m *HandlerAdapter) EXPECT() *HandlerAdapter_Expecter {
	return &HandlerAdapter_Expecter{mock: &_m.Mock}
}

// AdaptHandler provides a mock function with given fields:
func (_m *HandlerAdapter) AdaptHandler() func(http.ResponseWriter, *http.Request) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AdaptHandler")
	}

	var r0 func(http.ResponseWriter, *http.Request)
	if rf, ok := ret.Get(0).(func() func(http.ResponseWriter, *http.Request)); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func(http.ResponseWriter, *http.Request))
		}
	}

	return r0
}

// HandlerAdapter_AdaptHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AdaptHandler'
type HandlerAdapter_AdaptHandler_Call struct {
	*mock.Call
}

// AdaptHandler is a helper method to define mock.On call
func (_e *HandlerAdapter_Expecter) AdaptHandler() *HandlerAdapter_AdaptHandler_Call {
	return &HandlerAdapter_AdaptHandler_Call{Call: _e.mock.On("AdaptHandler")}
}

func (_c *HandlerAdapter_AdaptHandler_Call) Run(run func()) *HandlerAdapter_AdaptHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *HandlerAdapter_AdaptHandler_Call) Return(_a0 func(http.ResponseWriter, *http.Request)) *HandlerAdapter_AdaptHandler_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HandlerAdapter_AdaptHandler_Call) RunAndReturn(run func() func(http.ResponseWriter, *http.Request)) *HandlerAdapter_AdaptHandler_Call {
	_c.Call.Return(run)
	return _c
}

// NewHandlerAdapter creates a new instance of HandlerAdapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHandlerAdapter(t interface {
	mock.TestingT
	Cleanup(func())
},
) *HandlerAdapter {
	mock := &HandlerAdapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
