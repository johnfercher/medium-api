// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	apierror "github.com/johnfercher/medium-api/pkg/api/apierror"
	apiresponse "github.com/johnfercher/medium-api/pkg/api/apiresponse"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// HTTPHandler is an autogenerated mock type for the HTTPHandler type
type HTTPHandler struct {
	mock.Mock
}

type HTTPHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *HTTPHandler) EXPECT() *HTTPHandler_Expecter {
	return &HTTPHandler_Expecter{mock: &_m.Mock}
}

// Handle provides a mock function with given fields: r
func (_m *HTTPHandler) Handle(r *http.Request) (apiresponse.APIResponse, apierror.APIError) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for Handle")
	}

	var r0 apiresponse.APIResponse
	var r1 apierror.APIError
	if rf, ok := ret.Get(0).(func(*http.Request) (apiresponse.APIResponse, apierror.APIError)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(*http.Request) apiresponse.APIResponse); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(apiresponse.APIResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*http.Request) apierror.APIError); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(apierror.APIError)
		}
	}

	return r0, r1
}

// HTTPHandler_Handle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handle'
type HTTPHandler_Handle_Call struct {
	*mock.Call
}

// Handle is a helper method to define mock.On call
//   - r *http.Request
func (_e *HTTPHandler_Expecter) Handle(r interface{}) *HTTPHandler_Handle_Call {
	return &HTTPHandler_Handle_Call{Call: _e.mock.On("Handle", r)}
}

func (_c *HTTPHandler_Handle_Call) Run(run func(r *http.Request)) *HTTPHandler_Handle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *HTTPHandler_Handle_Call) Return(response apiresponse.APIResponse, err apierror.APIError) *HTTPHandler_Handle_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *HTTPHandler_Handle_Call) RunAndReturn(run func(*http.Request) (apiresponse.APIResponse, apierror.APIError)) *HTTPHandler_Handle_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *HTTPHandler) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// HTTPHandler_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type HTTPHandler_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *HTTPHandler_Expecter) Name() *HTTPHandler_Name_Call {
	return &HTTPHandler_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *HTTPHandler_Name_Call) Run(run func()) *HTTPHandler_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *HTTPHandler_Name_Call) Return(_a0 string) *HTTPHandler_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HTTPHandler_Name_Call) RunAndReturn(run func() string) *HTTPHandler_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Pattern provides a mock function with given fields:
func (_m *HTTPHandler) Pattern() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Pattern")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// HTTPHandler_Pattern_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pattern'
type HTTPHandler_Pattern_Call struct {
	*mock.Call
}

// Pattern is a helper method to define mock.On call
func (_e *HTTPHandler_Expecter) Pattern() *HTTPHandler_Pattern_Call {
	return &HTTPHandler_Pattern_Call{Call: _e.mock.On("Pattern")}
}

func (_c *HTTPHandler_Pattern_Call) Run(run func()) *HTTPHandler_Pattern_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *HTTPHandler_Pattern_Call) Return(_a0 string) *HTTPHandler_Pattern_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HTTPHandler_Pattern_Call) RunAndReturn(run func() string) *HTTPHandler_Pattern_Call {
	_c.Call.Return(run)
	return _c
}

// Verb provides a mock function with given fields:
func (_m *HTTPHandler) Verb() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Verb")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// HTTPHandler_Verb_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Verb'
type HTTPHandler_Verb_Call struct {
	*mock.Call
}

// Verb is a helper method to define mock.On call
func (_e *HTTPHandler_Expecter) Verb() *HTTPHandler_Verb_Call {
	return &HTTPHandler_Verb_Call{Call: _e.mock.On("Verb")}
}

func (_c *HTTPHandler_Verb_Call) Run(run func()) *HTTPHandler_Verb_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *HTTPHandler_Verb_Call) Return(_a0 string) *HTTPHandler_Verb_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HTTPHandler_Verb_Call) RunAndReturn(run func() string) *HTTPHandler_Verb_Call {
	_c.Call.Return(run)
	return _c
}

// NewHTTPHandler creates a new instance of HTTPHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHTTPHandler(t interface {
	mock.TestingT
	Cleanup(func())
},
) *HTTPHandler {
	mock := &HTTPHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
